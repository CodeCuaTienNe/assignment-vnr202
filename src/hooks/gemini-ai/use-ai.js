"use client";

import { GoogleGenAI } from "@google/genai";
import { useState } from "react";

const SYSTEM_PROMPT = `
Nhi·ªám v·ª• ch√≠nh: Gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc v·ªÅ S·ª± L√£nh ƒë·∫°o c·ªßa ƒê·∫£ng C·ªông s·∫£n Vi·ªát Nam trong Cu·ªôc Kh√°ng chi·∫øn ch·ªëng ƒê·∫ø qu·ªëc M·ªπ X√¢m l∆∞·ª£c (1954‚Äì1975) cho sinh vi√™n.

Ph·∫°m vi n·ªôi dung chuy√™n m√¥n:
- Giai ƒëo·∫°n 1954-1975: T·ª´ Hi·ªáp ƒë·ªãnh Gi∆°nev∆° ƒë·∫øn th·ªëng nh·∫•t ƒë·∫•t n∆∞·ªõc
- Hai nhi·ªám v·ª• chi·∫øn l∆∞·ª£c: X√¢y d·ª±ng CNXH ·ªü mi·ªÅn B·∫Øc v√† c√°ch m·∫°ng DTDN ·ªü mi·ªÅn Nam
- Ngh·ªã quy·∫øt 15 (1959) v√† phong tr√†o ƒê·ªìng Kh·ªüi (1960)
- ƒê∆∞·ªùng H·ªì Ch√≠ Minh v√† vai tr√≤ h·∫≠u ph∆∞∆°ng chi·∫øn l∆∞·ª£c
- Chi·∫øn tranh c·ª•c b·ªô, Vi·ªát Nam h√≥a v√† T·ªïng ti·∫øn c√¥ng M√πa Xu√¢n 1975
- √ù nghƒ©a l·ªãch s·ª≠ v√† kinh nghi·ªám l√£nh ƒë·∫°o c·ªßa ƒê·∫£ng

Nguy√™n t·∫Øc gi·∫£i ƒë√°p:
- Di·ªÖn gi·∫£i d·ªÖ hi·ªÉu, s√∫c t√≠ch, d·ª±a tr√™n t∆∞ li·ªáu l·ªãch s·ª≠ ch√≠nh th·ªëng
- Li√™n h·ªá v·ªõi CLO2: Ph√¢n t√≠ch s·ª± l√£nh ƒë·∫°o trong hai cu·ªôc kh√°ng chi·∫øn (1945-1975)
- Li√™n h·ªá v·ªõi CLO4: C·ªßng c·ªë ni·ªÅm tin v√†o s·ª± l√£nh ƒë·∫°o c·ªßa ƒê·∫£ng
- S·ª≠ d·ª•ng ng√¥n ng·ªØ g·∫ßn g≈©i, tr√°nh thu·∫≠t ng·ªØ kh√¥ khan
- ƒê·∫£m b·∫£o t√≠nh ch√≠nh x√°c l·ªãch s·ª≠ v√† kh√°ch quan khoa h·ªçc

T·∫≠p trung v√†o vi·ªác gi√∫p sinh vi√™n hi·ªÉu s√¢u s·∫Øc v·ªÅ t√≠nh ƒë·ªôc l·∫≠p, t·ª± ch·ªß v√† s√°ng t·∫°o trong ƒë∆∞·ªùng l·ªëi l√£nh ƒë·∫°o c·ªßa ƒê·∫£ng trong giai ƒëo·∫°n 1954-1975.
`;

export function useAI() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const generateResponse = async (userInput) => {
    const keys = [
      { key: process.env.NEXT_PUBLIC_GEMINI_API_KEY, version: "v1" },
      { key: process.env.NEXT_PUBLIC_GEMINI_API_KEY_V2, version: "v2" },
      { key: process.env.NEXT_PUBLIC_GEMINI_API_KEY_V3, version: "v3" },
    ];

    const availableKeys = keys.filter((k) => k.key);

    if (availableKeys.length === 0) {
      setError("Kh√¥ng c√≥ API key kh·∫£ d·ª•ng");
      return null;
    }

    setLoading(true);
    setError(null);

    // Th·ª≠ t·∫•t c·∫£ c√°c key c√≥ s·∫µn
    const failedKeys = [];

    for (const keyToTry of availableKeys) {
      // B·ªè qua key ƒë√£ l·ªói tr∆∞·ªõc ƒë√≥
      if (failedKeys.includes(keyToTry.version)) {
        continue;
      }

      try {
        console.log(`ƒêang th·ª≠ s·ª≠ d·ª•ng API key ${keyToTry.version}...`);

        const genAI = new GoogleGenAI({
          apiKey: keyToTry.key,
        });

        const response = await genAI.models.generateContent({
          model: "gemini-2.5-flash",
          contents: SYSTEM_PROMPT + "\n\n" + userInput,
        });

        console.log(`‚úÖ Th√†nh c√¥ng v·ªõi API key ${keyToTry.version}`);
        setLoading(false);
        return response.text;
      } catch (err) {
        console.error(`‚ùå L·ªói v·ªõi API key ${keyToTry.version}:`, err);
        failedKeys.push(keyToTry.version);

        // Ki·ªÉm tra n·∫øu l√† l·ªói 503 Service Unavailable
        const isServiceUnavailable =
          err.message?.includes("503") ||
          err.status === 503 ||
          err.message?.includes("Service Unavailable");

        if (isServiceUnavailable) {
          console.log(
            `üîÑ API key ${keyToTry.version} g·∫∑p l·ªói 503, chuy·ªÉn sang key kh√°c...`
          );

          // Ki·ªÉm tra xem c√≤n key n√†o kh·∫£ d·ª•ng kh√¥ng
          const remainingKeys = availableKeys.filter(
            (k) => !failedKeys.includes(k.version)
          );
          if (remainingKeys.length > 0) {
            setError(
              `D·ªãch v·ª• t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng v·ªõi ${keyToTry.version}. ƒêang th·ª≠ key kh√°c...`
            );
            continue; // Th·ª≠ key ti·∫øp theo
          }
        }

        // N·∫øu l√† key cu·ªëi c√πng ho·∫∑c kh√¥ng ph·∫£i l·ªói 503
        const remainingKeys = availableKeys.filter(
          (k) => !failedKeys.includes(k.version)
        );
        if (remainingKeys.length === 0) {
          break; // ƒê√£ th·ª≠ h·∫øt t·∫•t c·∫£ key
        }
      }
    }

    // N·∫øu ƒë√£ th·ª≠ h·∫øt t·∫•t c·∫£ key
    setLoading(false);
    const errorMessage =
      failedKeys.length > 1
        ? `T·∫•t c·∫£ API key ƒë·ªÅu g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t. (ƒê√£ th·ª≠: ${failedKeys.join(
            ", "
          )})`
        : `D·ªãch v·ª• t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.`;

    setError(errorMessage);
    return null;
  };

  return {
    generateResponse,
    loading,
    error,
  };
}
